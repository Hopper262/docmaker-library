#!/usr/bin/perl
use strict;
use warnings 'FATAL' => 'all';
use Encode ();
use Carp ();

our ($FILEROOT);
require "$FILEROOT/modules/io.subs";

sub RForkToHash
{
  my ($rfork) = @_;
  
  return undef unless defined $rfork;
  my $fLen = length $rfork;
  my %resources;
  
  eval {
    SetReadSource($rfork);
    # read header
    my $dataOff = ReadUint32();
    my $mapOff = ReadUint32();
    my $dataLen = ReadUint32();
    my $mapLen = ReadUint32();
    
    # sanity checks
    die if $dataOff < 16;
    die if $mapOff < 16;
    die if $mapLen < 30;
    die if ($dataOff < $mapOff && ($dataOff + $dataLen) > $mapOff);
    die if ($mapOff < $dataOff && ($mapOff + $mapLen) > $dataOff);
    die if ($dataOff + $dataLen) > $fLen;
    die if ($mapOff + $mapLen) > $fLen;
    
    # resource data - save for later
    ReadPadding($dataOff - CurOffset());
    my $dataBlock = ReadRaw($dataLen);
    
    # resource map
    ReadPadding($mapOff - CurOffset());
    ReadPadding(16);  # copy of header
    ReadPadding(4);   # handle to next map
    ReadPadding(2);   # file ref num
    ReadPadding(2);   # attributes
    
    my $typeListOff = $mapOff + ReadUint16();
    my $nameListOff = $mapOff + ReadUint16();
    
    # Inside Macintosh has it wrong. (Really, I'm guessing
    # it was coded wrong, and never got changed.)
    # The number of types falls inside the type-list offset.
    # my $numTypes = ReadUint16() + 1;
    
    # type list
    my %typeInfo;
    ReadPadding($typeListOff - CurOffset());
    my $numTypes = ReadUint16() + 1;
    for my $i (1..$numTypes)
    {
      my $typeCode = ReadRaw(4);
      my $numRefs = ReadUint16() + 1;
      my $refListOff = $typeListOff + ReadUint16();
      $typeInfo{$refListOff} = [ $typeCode, $numRefs ];
    }
    
    # reference list
    my (%dataInfo, %nameInfo);
    for my $refListOff (sort { $a <=> $b } keys %typeInfo)
    {
      ReadPadding($refListOff - CurOffset());
      my ($typeCode, $numRefs) = @{ $typeInfo{$refListOff} };
      $resources{$typeCode} = {};
      for my $i (1..$numRefs)
      {
        my $id = ReadSint16();
        my $nameOffRelative = ReadSint16();
        ReadPadding(1);  # attributes
        my $rsrcDataOff = $dataOff + ReadUint24();
        ReadPadding(4);  # handle
        
        $resources{$typeCode}{$id} = {};
        $dataInfo{$rsrcDataOff} = [ $typeCode, $id ];
        if ($nameOffRelative >= 0)
        {
          $nameInfo{$nameListOff + $nameOffRelative} = [ $typeCode, $id ];
        }
      }
    }
    
    # names
    for my $rnameOff (sort { $a <=> $b } keys %nameInfo)
    {
      ReadPadding($rnameOff - CurOffset());
      my ($typeCode, $id) = @{ $nameInfo{$rnameOff} };
      my $rnamelen = ReadUint8();
      my $rname = ReadRaw($rnamelen);
      $resources{$typeCode}{$id}{'name'} = Encode::decode("MacRoman", $rname);
    }
    
    # data
    SetReadSource($dataBlock);
    for my $rdataOff (sort { $a <=> $b } keys %dataInfo)
    {
      ReadPadding($rdataOff - $dataOff - CurOffset());
      my ($typeCode, $id) = @{ $dataInfo{$rdataOff} };
      my $rdatalen = ReadUint32();
      $resources{$typeCode}{$id}{'data'} = ReadRaw($rdatalen);
    }
  };
  if ($@)
  {
    return undef;
  }  
  return \%resources;
}

sub IconColorTable
{
  my ($depth) = @_;
  
  if ($depth == 1)
  {
    return [ [ 0, 0, 0 ], [ 1, 1, 1 ] ];
  }
  
  die unless ($depth == 8);
    
  my @colors;
  
  # The table has two major parts:
  #
  # - base-6 "web-safe" RGB colors
  # - base-16 R, G, B, gray color ramps
  #
  # The second set excludes the colors added in the first "web-safe"
  # section. One other wrinkle: black is saved for last, instead of
  # falling in its "natural" spot within the web-safe section.
  
  # So first, we'll build the fractions for "web-safe" vs. "color ramp"
  # sections, to make this obvious
  my (@webramp, @singleramp);
  for my $val (0..15)
  {
    if (($val % 3) == 0)
    {
      push(@webramp, $val / 15);
    }
    else
    {
      push(@singleramp, $val / 15);
    }
  }
  
  # Colors in table go from bright to dark, so flip the built lists
  @webramp = reverse @webramp;
  @singleramp = reverse @singleramp;
  
  # Now, we can build the web-safe section
  for my $red (@webramp)
  {
    for my $green (@webramp)
    {
      for my $blue (@webramp)
      {
        push(@colors, [ $red, $green, $blue ]);
      }
    }
  }
  
  # Save black for later
  pop @colors;
  
  # Next, handle the single-color ramps: R, G, B, gray
  for my $spec ([ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ], [ 1, 1, 1 ])
  {
    for my $val (@singleramp)
    {
      push(@colors, [ $val * $spec->[0], $val * $spec->[1], $val * $spec->[2] ]);
    }
  }
  
  # Finally, the black we skipped earlier
  push(@colors, [ 0, 0, 0 ]);

  return \@colors;
}

sub GetString
{
  my ($rsrc, $id, %opts) = @_;
  
  my $str = undef;
  $str = $opts{'default'} if $opts{'default'};
  
  my $data = undef;
  $data = $rsrc->{'STR '}{$id}{'data'}
      if defined $rsrc && exists $rsrc->{'STR '} && exists $rsrc->{'STR '}{$id};
  return $str unless defined $data;
  return $str unless length($data) > 1;
  
  my $len = unpack('C', $data);
  $str =  Encode::decode('MacRoman', substr($data, 1, $len));
  
  if ($opts{'trim'})
  {
    $str =~ s/\s+/ /g;
    $str =~ s/^ //;
    $str =~ s/ $//;
    unless (length $str)
    {
      $str = $opts{'default'} if $opts{'default'};
    }
  }
  
  return $str;
}

sub GetStyl
{
  my ($rsrc, $id) = @_;
  
  my @styles;
  my $data = undef;
  $data = $rsrc->{'styl'}{$id}{'data'};
  return \@styles unless defined $data;
  return \@styles unless length($data) > 1;
  
  SetReadSource($data);
  my $ct = ReadSint16();
  for my $i (1..$ct)
  {
    my %style;
    $style{'start'} = ReadSint32();
    $style{'height'} = ReadSint16();
    $style{'ascent'} = ReadSint16();
    $style{'font-id'} = ReadSint16();
    
    my $fontStyle = ReadUint8();
    $style{'bold'} = ($fontStyle & 0x01) ? 1 : 0;
    $style{'italic'} = ($fontStyle & 0x02) ? 1 : 0;
    $style{'underline'} = ($fontStyle & 0x04) ? 1 : 0;
    $style{'outline'} = ($fontStyle & 0x08) ? 1 : 0;
    $style{'shadow'} = ($fontStyle & 0x10) ? 1 : 0;
    $style{'condensed'} = ($fontStyle & 0x20) ? 1 : 0;
    $style{'extended'} = ($fontStyle & 0x40) ? 1 : 0;
    ReadPadding(1);
    
    $style{'size'} = ReadSint16();
    
    $style{'color'} = [ (ReadUint16() >> 8), (ReadUint16() >> 8), (ReadUint16() >> 8) ];
    
    push(@styles, \%style);
  }
  return \@styles;
}

sub GetClut
{
  my ($rsrc, $id) = @_;
  
  my @colors;
  my $data = undef;
  $data = $rsrc->{'clut'}{$id}{'data'}
      if defined $rsrc && exists $rsrc->{'clut'} && exists $rsrc->{'clut'}{$id};
  return \@colors unless defined $data;
  return \@colors unless length($data) > 15;
  
  my $ct = int(length($data) / 8) - 1;
  SetReadSource($data);
  ReadPadding(8);
  for my $i (1..$ct)
  {
    my $val = ReadUint16();
    push(@colors, [ (ReadUint16() >> 8), (ReadUint16() >> 8), (ReadUint16() >> 8), $val ]);
  }
  return \@colors;
}



1;
